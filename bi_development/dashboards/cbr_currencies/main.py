from abc import ABC, abstractmethod
import json
from lxml import etree
import pandas as pd
import os
import xml.etree.ElementTree as ET
from datetime import datetime, timedelta
from zeep import Client, Plugin
from decouple import config
import psycopg2


class CustomHeaderPlugin(Plugin):
    def __init__(self, soap_action):
        super().__init__()
        self.soap_action = soap_action

    def egress(self, envelope, http_headers, operation, binding=None, client=None):
        http_headers['SOAPAction'] = self.soap_action
        return envelope, http_headers
    

class Context:
    """–û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
    def __init__(self, service_name):
        self.username = config('USERNAME')
        self.password = config('PASSWORD')
        self.db_name = config('DB_NAME')
        self.configuration = {}
        self.service_name = service_name
        self.conn = psycopg2.connect(dbname=self.db_name, user=self.username, password=self.password, host="127.0.0.1")

    def get_attr(self, attr: str):
        with open("./services.json", "r") as file:
            services = json.load(file)
        self.configuration = [service for service in services["services"] if service["name"] == self.service_name]
        return self.configuration[0].get(attr)


# 1. –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ SOAP
class ISoapClient(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è SOAP-–∫–ª–∏–µ–Ω—Ç–æ–≤"""
    def __init__(self, context: Context):
        self.context = context
        self.wsdl = context.get_attr('wsdl')
        self.soap_action = context.get_attr('soap_action')
        self.method = context.get_attr('method')

    @abstractmethod
    def fetch_data(self) -> any:
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        pass

class IDateSoapClient(ISoapClient):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –¥–∞—Ç–∞–º–∏"""
    def __init__(self, context: Context):
        super().__init__(context)
        self.days_before = context.get_attr("days_before")
        self.dates = None

    def get_request_date(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç"""
        current_date = datetime.now()
        todate = current_date
        fromdate = todate - timedelta(days=self.days_before)
        self.dates = (fromdate, todate)


# 2. –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ XML -> DataFrame
class IParser(ABC):
    def __init__(self, context: Context):
        self.root_tag = './' + context.get_attr('root_tag')
        self.tags = context.get_attr('tags')
        self.columns = context.get_attr('columns')

    @abstractmethod
    def parse(self, xml_data: any) -> pd.DataFrame:
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ XML-–¥–∞–Ω–Ω—ã—Ö –≤ DataFrame"""
        pass
        


# 3. –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
class ITransformer(ABC):
    @abstractmethod
    def transform(self, df: pd.DataFrame) -> pd.DataFrame:
        pass


# 4. –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î
class ILoader(ABC):
    @abstractmethod
    def load(self, df: pd.DataFrame):
        pass


# 5. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç SOAP
class NoDateSoapClient(ISoapClient):
    def __init__(self, context: Context):
        super().__init__(context)
        self.query_parametrs = context.get_attr('parametrs')

    def fetch_data(self) -> any:
        client = Client(wsdl=self.wsdl, plugins=[CustomHeaderPlugin(self.soap_action)])
        response = getattr(client.service, self.method)(**self.query_parametrs)
        return response

# –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è SOAP-–∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–∞—Ç–∞–º–∏   
class DateSoapClient(IDateSoapClient):
    def __init__(self, context: Context):
        super().__init__(context)
        self.parameters = context.get_attr('parametrs')
        self.query_parametrs = None

    def fetch_data(self) -> any:
        self.get_request_date()
        self.query_parametrs = {
            param: value for param, value in zip(self.parameters, self.dates)
            }

        client = Client(wsdl=self.wsdl, plugins=[CustomHeaderPlugin(self.soap_action)])
        response = getattr(client.service, self.method)(**self.query_parametrs)
        return response

# –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏ —è SOAP-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ currencies 
class CurrencySoapClient(IDateSoapClient):
    def __init__(self, context: Context):
        super().__init__(context)
        self.parameters = context.get_attr('parametrs')
        self.query_parametrs = None

    def fetch_data(self, currency_code) -> any:
        self.get_request_date()
        self.query_parametrs = {
            param: value for param, value in zip(self.parameters, self.dates)
        }
        self.query_parametrs[self.parameters[2]] = currency_code

        client = Client(wsdl=self.wsdl, plugins=[CustomHeaderPlugin(self.soap_action)])
        response = getattr(client.service, self.method)(**self.query_parametrs)
        return response

class CurrencyFetcher:
    """–ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã."""
    
    def __init__(self, soap_client: CurrencySoapClient, csv_path):
        self.soap_client = soap_client
        self.csv_path = csv_path
        self.currencies = self.load_currencies()

    def load_currencies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –∏–∑ CSV."""
        df = pd.read_csv(self.csv_path, sep=';')
        return df['v_code'].tolist()

    def fetch_all(self):
        """–ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –≤–∞–ª—é—Ç–∞–º –∏ –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö."""
        results = []
        for currency in self.currencies:
            print(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª—é—Ç—ã {currency}...")  
            result = self.soap_client.fetch_data(currency)
            results.append(result)
        return results


class SoapServiceFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SOAP-—Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    @staticmethod
    def create(context: Context):
        print('–§–∞–±—Ä–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞')
        service_type = context.get_attr('name')  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞
        csv_path = './' + context.get_attr('csv_source')

        if service_type == 'currencies':
            print(f'–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {csv_path}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CurrencyFetcher')
            return CurrencyFetcher(CurrencySoapClient(context), csv_path)
        else:
            return NoDateSoapClient(context)  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

# 6. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
class MainParser(IParser):
    def __init__(self, context: Context):
        super().__init__(context)

    def parse(self, xml_data: list) -> pd.DataFrame:
        data = []
        for xml_doc in xml_data:
            tag = xml_doc
            row = {
                # –∏–∑–≤–ª–µ–∫–∞–µ–º –≤ root-—Ç–µ–≥–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ç–µ–≥–∞–º–∏ —á–µ—Ä–µ–∑ dict comp
                column_name: (tag.find(tag_name).text.strip() if tag.find(tag_name) is not None else None)
                for column_name, tag_name in zip(self.columns, self.tags)
            }
            print(row)
            data.append(row)
        print(data)
        df = pd.DataFrame(data)
        df.to_csv('./' + 'currencies' + '.csv', index=False, sep=';')
        return df


# 7. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä
class ExampleTransformer(ITransformer):
    def transform(self, df: pd.DataFrame) -> pd.DataFrame:
        df["name"] = df["name"].str.upper()
        return df


# 8. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –≤ –ë–î
class ExampleLoader(ILoader):
    def load(self, df: pd.DataFrame):
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ {len(df)} –∑–∞–ø–∏—Å–µ–π –≤ –ë–î...")


# 9. –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
class DataPipeline:
    """–ì–ª–∞–≤–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, service: SoapServiceFactory, parser: IParser, transformer: ITransformer, loader: ILoader, context: Context):
        self.parser = parser
        self.transformer = transformer
        self.loader = loader
        self.context = context
        self.service = service.create(context)

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        if isinstance(self.service, CurrencyFetcher):
            print('–ù–∞ —Ñ–∞–±—Ä–∏–∫–µ –≤—ã–±—Ä–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä CurrencyFetcher')
            results = self.service.fetch_all()
        else:
            print('–ù–∞ —Ñ–∞–±—Ä–∏–∫–µ –≤—ã–±—Ä–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä NoDateSoapClient')
            results = self.service.fetch_data()

        # results = self.service.fetch_all() if isinstance(self.service, CurrencyFetcher) else [self.service.fetch_data()]
        
        parsed = self.parser.parse(results)

        # for result in results:
            # transformed = self.transformer.transform(parsed)
            # self.loader.load(transformed)

script_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(script_dir)

# üî• –ó–∞–ø—É—Å–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
if __name__ == "__main__":
    context = Context(service_name="currencies")
    pipeline = DataPipeline(
        context=context,
        service=SoapServiceFactory(),
        parser=MainParser(context),
        transformer=ExampleTransformer(),
        loader=ExampleLoader(),
    )
    pipeline.run()
